######################################
### Stemmer part of the program ###
######################################

Define the Stemmer class
    Function to check if a letter is a vowel
    Function to analyze the structure of a word
    Function to get the amount of VC sequences in a word
    Function to check if a word contains a vowel
    Function to check if a word ends with the same consonant doubled
    Function to check if a word ends with a consonant-vowel-consonant from
    Function to perform supplementary steps for Step 1 Part 2
    Function for Step 1 Part 1 of the algorithm
    Function for Step 1 Part 2 of the algorithm
    Function for Step 1 Part 3 of the algorithm
    Function for Step 2 of the algorithm
    Function for Step 3 of teh algorithm
    Function for Step 4 of the algorithm
    Function for Step 5 Part 1 of the algorithm
    Function for Step 5 Part 2 of the algorithm
    Function to stem a word


######################################
### Extracting part of the program ###
######################################

Get input file names
Initialize entry count
initialize paragraph buffer
Initialize flag for previous line being empty
Define entry start pattern regex
Define ending pattern regex
Loop over each input file
    Extract directory and file name from input file path
    if directory is empty, set it to current working directory
    Set output file path

        
        Open input file for reading
            Loop over each line in input file
                Check if line matches entry start pattern
                    Increment entry count
                    Check if entry count matches the starting number in line and previous line was empty
                        Write line to output file
                        Set previous line empty to false
                    else:
                        Decrement entry count as this line is not a new entry
                Check if line is empty
                    Set previous line empty to True
                    Append line to paragraph buffer
                else:
                    Check if line matches ending pattern
                        Write the paragraph in paragraph buffer to output file
                        Reset paragraph buffer
                    else:
                        Set previous line empty to False
                        Append line to paragraph buffer
        Return output file path and number of entries extracted
   



#####################################
### Blacklist part of the program ###
#####################################

Import necessary libraries
Function to calculate 10% of the total number of abstracts and return a list of randomly chosen numbers
    Calculate 10% of the total number of abstracts
    Sample 10% of abstracts
    Return the sampled data

Function to create a histrogram plot with a logarithmic scale for the word frequencies stored in a dictionary and return a threshold value
    Plot histogram with logarithmic scale on y-axis and display edges of bins
    Add labels and title to the plot
    Add annotations for bin edges
    Save the plot
    Initialize threshold frequency
    Set default threshold to 1000 or lower based on fine-tuning
    Return the threshold value

Function to extract non-informative words based on random sampling and a threshold determined by histogram
    Extract directory and filename from input file path
    If filename is empty, raise FileNotFoundError
    Set output file path
    List of stop words
    Initialize Stemmer objects
    Regex pattern for medline entry
    initialize entry flag
    Try opening input and output files
        Make a random sampling
        Initialize dictionary for word frequencies
        Process each line in the input file
            Search for medline entry
            Check if it matches the entry pattern
                Extract entry identifier
                Check if entry identifier belongs to sampled abstracts
                    Set entry flag to True
                    Set entry flag to False
            If line is not an entry line, tokenize the abstract
                Tokenize the line while excluding non-words and numbers
                Loop over tokens
                    Check if token is not a stop word and proceed to stemming
                        Create key in stemmed_word_frequencies dictionary with stemmed word
                            Set frequency to one if key does not exist
                            Increment frequency by one if key exists
        Get threshold value
        Write non-informative words to output file based on threshold
        Return output file path


#######################################
### Informative part of the program ###
#######################################

Import necessary libraries
Attempt to import Stemmer module
Function to tokenize and stem each token of an abstract
    Tokenize the abstract while excluding non-words and numbers
    Stem each token
    Return the list of stemmed words and the number of words

Function to process abstracts and extract informative words
    List of stop words
    Exclude stop words and non-informative words, and insert them in a set
    Return the set of flitered words

Function to calculate single word frequencies of words in an abstract
    Initialize dictionary for word frequencies
    Loop over tokens and calculate frequencies
    Return the dictionary of word frequencies

Function to calculate co-occurrence frequencies for pairs in an abstract
    Initialize dictionary for co-occurrence frequencies
    Convert stemmed abstract to a list
    Loop over the stemmed abstract to calculate co-occurrences
    Return the co-occurrence frequencies dictionary

Function to calculate log-likelihood scores for pairs of wrods in an abstract
    Initialize dictionary for log-likelihood scores
    Initialize dictionary to store the maximum log likelihood score for each word1
    Loop over co-occurrence frequencies to calculate log-likelihoods
        Exclude words with frequencies of 1 and lower
            Compute expected co-occurrence value
            Compute log-likelihood
            Check if this is the best pair for the current word1
Fill the final log_likelihood_scores dictionary with the best pairs
Return the log-likelihood scores dictionary

Function to get informative words from abstracts and calculate log-likelihood scores
    Extract directory of the input_file
    Set the path for the output file
    Get the path for the blacklisted words
    Initialize batch size
    Initialize variables

        Open the input file
            Process each line in the input file
                Check if it is a new entry
                    Tokenize and stem the abstract
                    Process abstract to get informative words
                    Calculate single word frequencies
                    Calculate co-occurrence frequencies
                    Calculate log-likelihood scores
                    Add log-likelihood scores
                    Check if 20,000 entries have been processed
                        Sort the dictionary by values in descending order
                        Retain only the top 100 pairs
                        Combine current top 50 with overall top 50
                        Convert combined top 100 to a dictionary to remove duplicates
                        Sort the combined top 100 scores
                        Reset counter
                    Clear the variable for the next entry
                    Increment the counter
                If it is not a new entry, concatenate the line to the abstract variable

        Write the top 50 pairs to the output file
    
    Return the output file path

